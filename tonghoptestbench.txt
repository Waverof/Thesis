module MUX_tb;//Wei

  // Parameters
  parameter WIDTH = 8;
  parameter CHANNELS = 4;

  // Inputs
  reg reset;
  reg clk;
  reg [(CHANNELS-1):0] selOneHot;
  reg [(CHANNELS*WIDTH)-1:0] dataInBus;

  // Outputs
  wire [(WIDTH-1):0] dataOut;

  // Instantiate the Unit Under Test (UUT)
  MUX #(
    .WIDTH(WIDTH),
    .CHANNELS(CHANNELS)
  ) uut (
    .reset(reset),
    .clk(clk),
    .selOneHot(selOneHot),
    .dataInBus(dataInBus),
    .dataOut(dataOut)
  );

  // Clock generation
  always #5 clk = ~clk;

  initial begin
    // Initialize Inputs
    reset = 0;
    clk = 0;
    selOneHot = 0;
    dataInBus = 0;

    // Wait for global reset
    #10;
    
    // Test case 1: Select channel 0
    selOneHot = 4'b0001;
    dataInBus = {8'hAA, 8'hBB, 8'hCC, 8'hDD}; // Channel 0: 0xDD, Channel 1: 0xCC, Channel 2: 0xBB, Channel 3: 0xAA
    #10;
    $display("selOneHot = %b, dataOut = %h", selOneHot, dataOut);

    // Test case 2: Select channel 1
    selOneHot = 4'b0010;
    dataInBus = {8'hAA, 8'hBB, 8'hCC, 8'hDD};
    #10;
    $display("selOneHot = %b, dataOut = %h", selOneHot, dataOut);

    // Test case 3: Select channel 2
    selOneHot = 4'b0100;
    dataInBus = {8'hAA, 8'hBB, 8'hCC, 8'hDD};
    #10;
    $display("selOneHot = %b, dataOut = %h", selOneHot, dataOut);

    // Test case 4: Select channel 3
    selOneHot = 4'b1000;
    dataInBus = {8'hAA, 8'hBB, 8'hCC, 8'hDD};
    #10;
    $display("selOneHot = %b, dataOut = %h", selOneHot, dataOut);

    // Finish simulation
    $stop;
  end
initial begin
 $dumpfile("dump.vcd"); 
 $dumpvars;
 end
endmodule


================================================================
================================================================

`timescale 1ns / 1ps

module arbiter_tb;//RRAr3
    parameter WIDTH = 4;

    // Inputs
    reg clk;
    reg reset;
    reg [WIDTH-1:0] req;

    // Outputs
    wire [WIDTH-1:0] grant;

    // Instantiate the Unit Under Test (UUT)
    arbiter #(WIDTH) uut (
        .clk(clk), 
        .reset(reset), 
        .req(req), 
        .grant(grant)
    );

    // Clock generation
    initial begin
        clk = 0;
        forever #5 clk = ~clk; // 10ns period (100MHz clock)
    end

    // Test sequence
    initial begin
        // Initialize Inputs
        reset = 1;
        req = 0;

        // Wait for global reset to finish
        #20;

        // Deassert reset
        reset = 0;

        // Apply test vectors
        req = 4'b0110; // Request from client 0
        #40;
        req = 4'b1110; // Request from client 1
        #50;
        req = 4'b0100; // Request from client 2
        #20;
        req = 4'b1000; // Request from client 3
        #20;
        req = 4'b1111; // Requests from all clients
        #20;
        req = 4'b0000; // No requests
        #20;
        
        // Apply more complex test vectors
        req = 4'b1010; // Simultaneous requests from clients 1 and 3
        #20;
        req = 4'b1100; // Simultaneous requests from clients 2 and 3
        #20;
        req = 4'b0110; // Simultaneous requests from clients 1 and 2
        #20;
        req = 4'b1001; // Simultaneous requests from clients 0 and 3
        #20;

        // Reset the system
        reset = 1;
        #20;
        reset = 0;
        req = 4'b0110; // Simultaneous requests from clients 1 and 2
        #20;

        // Finish simulation
        $finish;
    end

    // Monitor signals
    initial begin
        $monitor("Time: %0t | clk: %b | reset: %b | req: %b | grant: %b", 
                  $time, clk, reset, req, grant);
    end
   initial begin
 $dumpfile("dump.vcd"); 
 $dumpvars;
 end

endmodule
============================================================
============================================================

`timescale 1ns / 1ps

module tb_ArbDynamicRoundRobin;//Dynamic

  // Parameters
  parameter REQ_NUM = 4;
  parameter PRI_WIDTH = clog2(REQ_NUM);
  parameter PRI_TOTALW = REQ_NUM * PRI_WIDTH;
  parameter COUNTER_W = clog2(REQ_NUM);

  // Testbench signals
  reg clk;
  reg rst_n;
  reg [REQ_NUM-1:0] req;
  reg [PRI_TOTALW-1:0] priorityLevel;
  wire [REQ_NUM-1:0] grant;

  // Instantiate the arbiter
  ArbDynamicRoundRobin #(
    .REQ_NUM(REQ_NUM)
  ) dut (
    .clk(clk),
    .rst_n(rst_n),
    .req(req),
    .priorityLevel(priorityLevel),
    .grant(grant)
  );

  // Clock generation
  always #5 clk = ~clk;

  // Initialize the testbench
  initial begin
    // Initialize signals
    clk = 0;
    rst_n = 0;
    req = 0;
    priorityLevel = 0;

    // Apply reset
    #10 rst_n = 1;
    
    // Test case 1: Single request with highest priority
    req = 4'b0001; // Request 0
    priorityLevel = {2'b00, 2'b00, 2'b00, 2'b00}; // All priorities set to 0
    #20;

    // Test case 2: Multiple requests with different priorities
    req = 4'b1111; // All requests
    priorityLevel = {2'b01, 2'b10, 2'b11, 2'b00}; // Priorities: 1, 2, 3, 0
    #20;
			
    // Test case 3: Multiple requests with the same priority
    req = 4'b1111; // All requests
    priorityLevel = {2'b01, 2'b01, 2'b01, 2'b01}; // All priorities set to 1
    #20;

    // Test case 4: No requests
    req = 4'b0000; // No requests
    priorityLevel = {2'b00, 2'b00, 2'b00, 2'b00}; // All priorities set to 0
    #20;

    // Test case 5: Requests changing dynamically
    req = 4'b1010; // Requests 1 and 3
    priorityLevel = {2'b01, 2'b10, 2'b11, 2'b00}; // Priorities: 1, 2, 3, 0
    #20;

    req = 4'b0101; // Requests 0 and 2
    priorityLevel = {2'b01, 2'b10, 2'b11, 2'b00}; // Priorities: 1, 2, 3, 0
    #20;

    // Finish simulation
    $finish;
  end

  // Function to calculate clog2
  function integer clog2;
    input integer value;
    integer i;
    begin
      clog2 = 0;
      for(i = 0; 2**i < value; i = i + 1)
        clog2 = i + 1;
    end
  endfunction

  // Monitor the output signals
  initial begin
    $monitor("Time = %0t, req = %b, priorityLevel = %b, grant = %b", $time, req, priorityLevel, grant);
  end
initial begin
 $dumpfile("dump.vcd"); 
 $dumpvars;
 end
endmodule
=============================
==============================================
module tb_ArbPriorityRR;
  parameter REQ_NUM = 4;
  reg clk;
  reg rst_n;
  reg [REQ_NUM-1:0] req;
  wire [REQ_NUM-1:0] grant;

  // Instantiate the ArbPriorityRR module
  ArbPriorityRR #(.REQ_NUM(REQ_NUM)) uut (
    .clk(clk),
    .rst_n(rst_n),
    .req(req),
    .grant(grant)
  );

  // Clock generation
  initial begin
    clk = 0;
    forever #5 clk = ~clk;
  end

  // Test sequence
  initial begin
    // Initialize signals
    rst_n = 0;
    req = 0;

    // Apply reset
    #10 rst_n = 1;

    // Test Case 1: Single request active
    #10 req = 4'b0001;
    #20 req = 4'b0000; // Clear request to check if grant holds
    #20;

    // Test Case 2: Multiple requests, should grant based on round-robin priority
    #10 req = 4'b1010; // Requests 3 and 1 active
    #20 req = 4'b0000; // Clear requests
    #20 req = 4'b0101; // Requests 2 and 0 active
    #20 req = 4'b0000; // Clear requests

    // Test Case 3: All requests active
    #10 req = 4'b1111; // All requests active
    #80 req = 4'b0000; // Clear requests

    // Test Case 4: No requests active
    #10 req = 4'b0000; // No requests active
    #20;

    // Test Case 5: Sequential requests
    #10 req = 4'b0001; // Request 0 active
    #20 req = 4'b0010; // Request 1 active
    #20 req = 4'b0100; // Request 2 active
    #20 req = 4'b1000; // Request 3 active
    #20 req = 4'b0000; // Clear requests
    #20;

    // Finish simulation
    #100 $finish;
  end

  // Monitor outputs
  initial begin
    $monitor("Time=%0t, req=%b, grant=%b, rrCounter=%d", $time, req, grant, uut.rrCounter);
  end
  initial begin
 $dumpfile("dump.vcd"); 
 $dumpvars;
 end

endmodule
========================================================
========================================================

`timescale 1ns/1ns
module arbiter_tb;
  parameter REQ_NUM = 4;

  reg clk;
  reg rst_n;
  reg [REQ_NUM-1:0] req;
  wire [REQ_NUM-1:0] grant;

  // Instantiate the arbiter
  arbiter #(REQ_NUM) uut (
    .clk(clk),
    .rst_n(rst_n),
    .req(req),
    .grant(grant)
  );
initial begin
    clk = 0;
    forever #5 clk = ~clk; // 10ns period clock
  end

  initial begin
    // Initialize inputs
    clk = 0;
    rst_n = 0;
    req = 0;
    #5;
    rst_n = 1;
	// Request 1
    #5;
	req = 4'b0001;
    #10;
    // Request 2   
	req = 4'b0010;
    #10;
    // Request 3 
	req = 4'b0100;
    // Request 0 and 2
    #10
    req = 4'b0101;
    #10;
    //  Request 1 and 3
    req = 4'b1010;
    #10;
    //  All requests
    req = 4'b1111;
    #20
    // End simulation
    $stop;
  end
  initial begin
    $monitor("At time %t, req = %b, grant = %b", $time, req, grant);
  end
  initial begin
 $dumpfile("dump.vcd"); 
 $dumpvars;
 end
endmodule 
===========================================
============================================
`timescale 1ns/1ps
module tb_ArbSimpleRR;

  // Parameters
  parameter REQ_NUM = 4;
  parameter COUNTER_W = $clog2(REQ_NUM);

  // Testbench signals
  reg clk;
  reg rst_n;
  reg [REQ_NUM-1:0] req;
  wire [REQ_NUM-1:0] grant;

  // Instantiate the ArbSimpleRR module
  ArbSimpleRR #(
    .REQ_NUM(REQ_NUM)
  ) uut (
    .clk(clk),
    .rst_n(rst_n),
    .req(req),
    .grant(grant)
  );

  // Clock generation
  always begin
    #5 clk = ~clk;
  end

  // Test scenarios
  initial begin
    // Initialize signals
    clk = 0;
    rst_n = 0;
    req = 0;

    // Apply reset
    #10;
    rst_n = 1;

    // Scenario 1: Single request
    req = 4'b0001;
    #20;
    req = 4'b0010;
    #20;

    // Scenario 2: Multiple requests
    req = 4'b0100;
    #20;
    req = 4'b1000;
    #20;

    // Scenario 3: All requests
    req = 4'b0111;
    #20;
    req = 4'b0100;
    #20;

    // Scenario 4: Round-robin test
    req = 4'b1100;
    #20;
    req = 4'b1001;
    #20;
    req = 4'b0100;
    #20;
    req = 4'b1000;
    #20;
    req = 4'b0001;
    #20;
    req = 4'b1111;
    #20;

    // Scenario 5: No request
    req = 4'b0000;
    #20;

    // Finish simulation
    $stop;
  end

  // Monitor signals
  initial begin
    $monitor("Time=%0d, clk=%b, rst_n=%b, req=%b, grant=%b", $time, clk, rst_n, req, grant);
  end
  initial begin
 $dumpfile("dump.vcd"); 
 $dumpvars;
 end
endmodule